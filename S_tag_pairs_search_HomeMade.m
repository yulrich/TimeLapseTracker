% FindTags: for ColorModel2 (8 classes, including shadows but not food)
% FindTags2: for ColorModel3 (8 classes, including food)
% New : AntsPairsDistFilt (L.60)
% Re-structured (calls functions) version of tag_pairs_search2
% includes variables for quality of ID (
% changed: L. 28-29 in TagPairsDistFilt

function [plate] = S_tag_pairs_search_HomeMade(I,pixPrb,mask,Trck,PLOT,binnum,colorList,f)

% non assignment cost for [2-tagged & oriented 2-tagged & unoriented 1-tagged] objects
NAC=[10 5 2];

ants = struct('position',{},'color',{},'quality',{});

[tagblob, anttagblob, antBW, ~,~]= FindTags_HomeMade(pixPrb,I,mask,PLOT); % I passed to FindTags only for plotting purposes (remove later)

[Candidates]= TagPairsDistFilt(tagblob,anttagblob, 32, 14.5); % maxdist, mindist for tag pairs dist. pre-filtering
% mindist changed from 14.5 on 11/09/15, and back from 14.1 on 12/16/15

[Candidates]= tagPairsGeodistFilt(tagblob,anttagblob,Candidates,antBW,27,7); % maxdist changed from 25 on 11/11/15, mindist introduced on 11/19/15

SymMat= Candidates + transpose(Candidates);
Pairings=sum(SymMat); % sums columns
Ambiguous=find(Pairings>1);% index of tags with more than one potential partner
nAmbiguous=size(Ambiguous,2);


% FIND SUBNETWORKS
AllSubNet=[];
for c=Ambiguous
    [SubMatInd] = FindSubNetwork(c,SymMat);
    AllSubNet=catpad(1,AllSubNet,SubMatInd);
end

% eliminate redudant SubMatInd (generated by tags of the same subnetwork)
AllSubNet(isnan(AllSubNet))=Inf; %trick to bypass the fact that NaN==NaN is false
UniqueSubNet=unique(AllSubNet,'rows');
UniqueSubNet(isinf(UniqueSubNet))=nan;

for n=1:size(UniqueSubNet,1)
    SubNet=UniqueSubNet(n,:);
    SubNet=SubNet(~isnan(SubNet));
    NumTags=size(SubNet,2);
    SubCandidates=Candidates(SubNet,SubNet);
    [uniqueCandidates]= PairCulling(SubCandidates,SubNet);
    
    if size(uniqueCandidates,1)==1
        MatuC=reshape(uniqueCandidates(1,:), NumTags,NumTags);
        %find changes post pair culling and incorporate into Candidates
        [ChangeIndRow,ChangeIndCol]=find(SubCandidates-MatuC);
        Candidates(SubNet(ChangeIndRow),SubNet(ChangeIndCol))=0;
    end
end

[f_row,f_col] = find(Candidates>0);

%count links(edges) per tag
taglist=cat(1,f_row,f_col);
nLinks=zeros(size(taglist));
for i=1:size(taglist,1)
    nLinks(i)=sum(taglist==taglist(i));
end
Links=reshape(nLinks,size(f_row,1),2);

ant_num=0;

for pair=1:size(f_row,1)
    
    i=f_row(pair);
    c=f_col(pair);
    
    Ambig=sum(Links(pair,:)); % changed from max(Links(pair,:))on 11/16
    
    midpointX=(tagblob.centroid(i,1)+tagblob.centroid(c,1))/2;
    midpointY=(tagblob.centroid(i,2)+tagblob.centroid(c,2))/2;
    
    % ALIGN ANT angle between the line connecting the two tags and the x-axis (in radians)
    Rad=atan2(tagblob.centroid(c,2)-tagblob.centroid(i,2),tagblob.centroid(c,1)-tagblob.centroid(i,1));
    
    % CROP ANT
    [Antpic,BWpic]=cropAnt4(I,antBW,midpointX,midpointY,Rad,10,55); %last two inputs : width, length of rect
    % length changed from 50 10/02/15, width from 14 on 09/25/15
    [dilSkelD,NBranchpoints]=AntSkeleton2(Antpic,BWpic,1);
    % calculates pixels tag probabilities (L17) on masked images
    [antmean,tagmean,AntpixPrb] = getAntTagPixPrb_HomeMade(Antpic,dilSkelD,Trck.SmColorPnormAnt,Trck.ColorMax,binnum,0);
    % Antpic, NBranchpoints, dilSkelD can be removed when no longer needed to visually check peaks
    [headup,nAntPeaks,nTagPeaks] = antHeadUp4(antmean,tagmean,Antpic,NBranchpoints,dilSkelD,PLOT); %last term : plot
    
    if nAntPeaks>2 || nTagPeaks>2  % ~headup % unorientable ants get a second crop
        [Antpic,BWpic]=cropAnt4(I,antBW,midpointX,midpointY,Rad,5,40); %last two inputs : width, length of rect
        % length changed from 42, width from 8 on 09/25/15
        [dilSkelD,NBranchpoints]=AntSkeleton2(Antpic,BWpic,0);
        % calculates pixels tag probabilities (L17) on masked images
        [antmean,tagmean,AntpixPrb] = getAntTagPixPrb_HomeMade(Antpic,dilSkelD,Trck.SmColorPnormAnt,Trck.ColorMax,binnum,0);
        [headup,~,nTagPeaks] = antHeadUp4(antmean,tagmean,Antpic,NBranchpoints,dilSkelD,PLOT);
        % if there's only 1 Tag Peak left, break the link (if that creates orphans,they'll be analyzed below)
    end
    
    if nTagPeaks<2 && (headup==0) % (headup==0) added on 1/11/17
        Candidates(i,c)=0;
    else
        % Antpic, NBranchpoints, dilSkelD can be removed when no longer needed to visually check peaks
        [colorID,~,PROB,orient] = AnalyzeTwoTags5(headup,BWpic,AntpixPrb,colorList,Ambig,Antpic,PLOT,f);
        
        %if there's still not a full ID (i.e. on of the tags is still '?', break the link (the IDed tag will be considered an orphan below)
        if ~isempty(regexp(strcat(colorID{:}),'?','ONCE'))
            Candidates(i,c)=0;
        else
            
            ant_num=ant_num+1;
            for k=1:size(anttagblob.centroid,1)
                if ~isempty(intersect(anttagblob.linindxpixlist{k},tagblob.linindxpixlist{i}))&& ~isempty(intersect(anttagblob.linindxpixlist{k},tagblob.linindxpixlist{c}))
                    % tagblob.anttagblob(i)=k; %can a tag be on several anttagblobs?
                    ants(ant_num).blob = k;
                end
            end
            ants(ant_num).position = [midpointX,midpointY];
            ants(ant_num).color = [colorID{1} ' ' colorID{2}];
            ants(ant_num).colProb=PROB; % ambiguities corrected
            ants(ant_num).orient=orient;
            ants(ant_num).quality=1/(NBranchpoints+1);
            ants(ant_num).ambig=Ambig;
            if orient
                ants(ant_num).nac=NAC(1);
            else
                ants(ant_num).nac=NAC(2);
            end
        end
    end
end

% removes obvious duplicates (ants with the same ID, or opposite unoriented ID that are close <10)
[ants]= AntsPairsDistFilt(ants);

% adjust numebr of ID/anttagblob to the size of the anttagblob
for a=1:size(ants,2)
    blobNum= ants(a).blob;
    blobmates=size(structfind(ants,'blob',blobNum),2);
    AntsperBlobArea=blobmates/double(anttagblob.area(blobNum));
    if AntsperBlobArea > 0.005
        ants(a).nac=ants(a).nac/2;
    end
    
end


% ORPHAN TAGS
% search for orphan tags in Candidates, check that they're on an antblob,color ID and assign matching probability

SymMat= Candidates + transpose(Candidates);
nConn= sum(SymMat,2);
OrphanTags=find(nConn==0);

for c=OrphanTags'
    if tagblob.area(c)>37 % added on 11/16, changed from 70 on 12/7/15
        for k=1:size(anttagblob.centroid,1)
            if  ~isempty(intersect(anttagblob.linindxpixlist{k},tagblob.linindxpixlist{c}))
                % disp([num2str(c) ' ' num2str(tagblob.area(c))])
                % unless the blob is single-ant sized and already has a full ID, assign it a half ID
                if (anttagblob.area(k)>380) || isempty(structfind(ants,'blob',k))
                    ant_num=ant_num+1;
                    [colorID,PROB] =IDOneTag2_HomeMade(pixPrb,tagblob,c,colorList);
                    
                    ants(ant_num).position = [tagblob.centroid(c,1),tagblob.centroid(c,2)];
                    ants(ant_num).color = colorID;
                    ants(ant_num).quality=0.2; % changed on 11/24 (~ worse observed quality of two-tagged ants)
                    ants(ant_num).ambig=[];
                    ants(ant_num).nac=NAC(3); % unassigned detection cost very low
                    ants(ant_num).colProb=PROB; % ambiguities corrected
                    ants(ant_num).orient=0;
                    ants(ant_num).blob = k;
                end
            end
        end
    else
        
%         [antcrop,~,~] = RectMkr(tagblob.centroid(c,:),50,50);% changed from 52 (square) on 1/28
%         pos = antcrop.Position;
%         Antpic = imcrop(I,pos);
%         BWtags = imcrop(tags,pos);
%         figure, imshow (BWtags), hold on,  imshow(Antpic), alpha(0.35)
%         title(['frame ' num2str(f) ' tagsize: ' num2str(tagblob.area(c))]);
        
    end   
end


% CLEAN structure of empty lines
emptyInd=structfind(ants,'position',[]);
ants(emptyInd)=[];

[optants]= GlobalOpt_OneFrame2(ants,colorList,I,NAC,PLOT); %I only for result visualization
plate.ants = optants;

% if PLOT==1
% figure, imshow(I);
% % title(name);
% hold on
% for i=1:size(ants,2)
%     if ~isempty(ants(i).position)&& ants(i).orient
%         text(ants(i).position(1),ants(i).position(2),ants(i).color);
%     elseif ~isempty(ants(i).position)&& ~ants(i).orient
%         text(ants(i).position(1),ants(i).position(2),['(' ants(i).color ')']);
%     end
% end
% hold off
% end







